package e_oop;

public class VariableInit {
	
	// 명시적 초기화 : 변수를 만듦과 동시에 초기화
	int var = 10;
	static int classVar = 20;
	
	//---------------------------------------------
	
	// 초기화 블럭{} : 클래스 안에서 블럭을 여는것
	{
		var = 20; // 인스턴스를 초기화하는 초기화 블럭
	}
	
	static { //클래스를 초기화 할때는 static을 붙힌다.
		classVar = 40;
	}
	
	//---------------------------------------------
	
	// 생성자 (☆)
	/*
	 *  - 클래스와 같은 이름의 메서드
	 *  - 인스턴스 변수를 초기화하기 위해 사용한다.
	 *  - 클래스에 생성자는 반드시 하나 이상 존재해야 한다.
	 *  - 직접 선언해주지 않으면 컴파일러가 기본 생성자를 만들어준다.
	 *  - 생성자는 리턴타입이 없다.
	 *  - 생성자는 메서드이름이 제일 먼저 온다
	 */
	
	VariableInit(){ // -> 생성자
		var = 50;
		// 생성자를 사용하는 이유는 파라미터를 사용할 수 있기 때문이다.
	}
	
	public static void main(String[] args) {
		Init i1 = new Init();
		i1.a = 10;
		i1.b = 20;
		i1.c = 30;
		
		Init i2 = new Init();
		i2.a = 40;
		i2.b = 50;
		i2.c = 60;
		
		Init i3 = new Init(70, 80, 90); //파라미터를 받아서 (외부데이터를 받는것) 초기화하기위해서 생성자를 사용
		
		
	}
	
	
}

class Init{
	int a;
	int b;
	int c;
	
	Init(int a, int b, int c){
		this.a = a;
		this.b = b;
		this.c = c;
		// this(객체의 주소가 들어있는 변수) : 인스턴스 변수와 지역변수의 이름이 같을 때 둘을 구분하기 위해 사용한다.
	}
	
	// 오버로딩 : 같은 이름의 메서드를 여러개 정의하는 것, 이름으로는 구분을 못하니 파라미터(갯수, 타입)로 구분한다.
	// 조건 : 파라미터의 개수나 타입이 달라야 한다.
	// 오버로딩의 대표적인 예 : System.out.println(); 
	Init(){ // 파라미터가 없는 생성자
		this(10, 20, 30); // 변수 초기화
		// this() : 생성자에서 다른 생성자를 호출할 때 사용한다.
		
	}
	
}
